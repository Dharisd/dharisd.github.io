<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Mohamed Dharis</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Mohamed Dharis</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 18 Nov 2019 21:24:46 +0500</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>When can I see the International space station?</title>
            <link>/posts/international-space-station/</link>
            <pubDate>Mon, 18 Nov 2019 21:24:46 +0500</pubDate>
            
            <guid>/posts/international-space-station/</guid>
            <description>The ISS orbits the earth aproximately 16 times per day. This means that if you look at the sky at the right time you can see it as a bright star moving fast across the horizion
I looked at apps that would remind me when iss passes visible over me but found none that did the job well enough. So i set out to build my own tool that will show when i should look up</description>
            <content type="html"><![CDATA[

<p><img src="https://raw.githubusercontent.com/Dharisd/iss_bot/master/demo.jpg" alt="demo photo" /></p>

<p>The ISS orbits the earth aproximately 16 times per day. This means that if you look at the sky at the right time you can see it as a bright star moving fast across the horizion</p>

<p>I looked at apps that would remind me when iss passes visible over me but found none that did the job well enough. So i set out to build my own tool that will show when i should look up</p>

<h3 id="iss-bot">ISS bot</h3>

<p><img src="https://raw.githubusercontent.com/Dharisd/iss_bot/master/channel.jpg" alt="channel photo" /></p>

<p>Each day,the bot checks whether there are any visible passes if so texts to the <a href="https://t.me/iss_noti">telegram channel</a>.</p>

<p>The source code for it is available <a href="https://github.com/Dharisd/iss_bot">here</a></p>

<h2 id="how-it-works">How it works</h2>

<p>Part of the main function which does calculations</p>

<pre><code class="language-python">    stations_url = 'http://celestrak.com/NORAD/elements/stations.txt'
    satellites = load.tle(stations_url)
    satellite = satellites['ISS (ZARYA)']

    #get values for time,we only search for times in which passes would be visible morning and dusk
    #this is due to the sunsbrightness and lackof light to be reflected
    minutes1 = range(240,1440) # 4 to 7
    minutes2 = range(1050,1170) # 1530 to 1930

    minutes = minutes1 #+ list(minutes2)

    minutes = range(start,end)
    ts = load.timescale()
    t = ts.utc(dt.year, dt.month, dt.day, -5, minutes)


     #pedict according to time
    loc = Topos(cords[0], cords[1])
    difference = (satellite - loc).at(t)
    alt, az, distance = difference.altaz()

    #Get times itsabove horizon
    above_horizon = alt.degrees &gt; 0
    
</code></pre>

<h3 id="on-a-high-level-the-script-uses-python-spacefield-to">On a high level the script uses python spacefield to</h3>

<ul>
<li><p>fetch tles from celestrak</p>

<pre><code class="language-python">stations_url = 'http://celestrak.com/NORAD/elements/stations.txt'
satellites = load.tle(stations_url)
satellite = satellites['ISS (ZARYA)']
</code></pre></li>

<li><p>calculate the  altiutude , azimuth and distance between the input location and the ISS for the given time range t.(The values of minutes1 and 2 are the ranges of time at which light&rsquo;ll reflect of the ISS)</p>

<pre><code class="language-python">#get values for time,we only search for times in which passes would be visible morning and dusk
#this is due to the sunsbrightness and lackof light to be reflected
minutes1 = range(240,1440) # 4 to 7
minutes2 = range(1050,1170) # 1530 to 1930

minutes = minutes1 #+ list(minutes2)

minutes = range(start,end)
ts = load.timescale()
t = ts.utc(dt.year, dt.month, dt.day, -5, minutes)


 #pedict according to time
loc = Topos(cords[0], cords[1])
difference = (satellite - loc).at(t)
alt, az, distance = difference.altaz()
</code></pre></li>

<li><p>Finds the values of t at which ISS has a positive altitude</p>

<pre><code class="language-python">#Get times itsabove horizon
above_horizon = alt.degrees &gt; 0

above_horizon[-1] = 0
above_horizon[0] = 0
#above_horizon = insert(above_horizon,-1,0)




#boundaries by setsand rising time
boundaries, = diff(above_horizon).nonzero()
    
</code></pre></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Automating the boring stuff: past papers</title>
            <link>/posts/ppbot/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>/posts/ppbot/</guid>
            <description>While i was studying for A levels. I found out i was spending a lot of time searching for and downloading past papers. Since the sites that offered these files were clumsy had not so great ux. Finding a single past past paper required you to naviagte to at least three pages. The final page being an index of all past papers for that particular subject. so like any sane person I went on and created pastpaper bot aka ppbot.</description>
            <content type="html"><![CDATA[

<p>While i was studying for A levels. I found out i was spending a lot of time searching for and downloading past papers. Since the sites that offered these files were clumsy had not so great ux. Finding a single past past paper required you to naviagte to at least three pages. The final page being an index of all past papers for that particular subject. so like any sane person I went on and created <a href="https://t.me/pastpaper_bot">pastpaper bot</a> aka ppbot. Which quite a few students found useful</p>

<p><img src="../ppbot.jpg" width="400"></p>

<p>ppbot is simple and asks you only what you need and sends the pdfs for pastpapers</p>

<p>source code for ppbot is available <a href="https://github.com/Dharisd/pastpaper-bot">here</a></p>

<h2 id="how-it-works">How it works?</h2>

<p>I found out that the pastpaper sites are like huge indexes containing files which are named to a standard convenient format.
i used this to my advantage an wrote a quick scraper. The final scraper takes works like this</p>

<p><code>scrp.py --url https://www.physicsandmathstutor.com/past-papers/a-level-physics/edexcel-unit-2/</code></p>

<p>The scraper identifies the subject and unit of the past paper and stores all entries on the url to a mongodb db . Another script then downloads these pdfs and makes them available locally</p>

<h2 id="the-telegram-bot">The telegram bot</h2>

<p>Making the telegram bot was quite straight forward i just had to get enough data from the user and call the db to get the files. I used the python telegram bot package to easily interact with telegram.</p>

<h2 id="support">support</h2>

<p>I didnt expect much if any users to actually use it other than me. But by the time the exams ended the bot had served more than 2000 pastpapers to more than 50 unique students.</p>
]]></content>
        </item>
        
    </channel>
</rss>
